import random
import logging
import subprocess
import sys
import os
import re
import time
import concurrent.futures
import discord
from discord.ext import commands, tasks
import docker
import asyncio
from discord import app_commands

TOKEN = ''  # TOKEN HERE
SERVER_LIMIT = 100000000000000000000
database_file = 'database.txt'

intents = discord.Intents.default()
intents.messages = False
intents.message_content = False

bot = commands.Bot(command_prefix='/', intents=intents)
client = docker.from_env()

async def execute_command(command):
    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()
    return stdout.decode(), stderr.decode()

async def capture_ssh_session_line(process):
    while True:
        output = await process.stdout.readline()
        if not output:
            break
        output = output.decode('utf-8').strip()
        if "ssh session:" in output:
            return output.split("ssh session:")[1].strip()
    return None

@bot.tree.command(name="deploy", description="Creates a new Instance with Ubuntu 22.04")
async def deploy_ubuntu(interaction: discord.Interaction):
    await interaction.response.send_message(embed=discord.Embed(description="## Creating VPS, This might take a few seconds.", color=0x00ff00))

    image = "ubuntu:22.04"

    try:
        container_id = subprocess.check_output([
            "docker", "run", "-itd", "--name", f"vps-{interaction.user.id}", image
        ]).strip().decode('utf-8')

        # Install dependencies inside the container
        setup_script = """
        apt update && apt install -y sudo git wget cmake python3 python3-pip nodejs npm tmate
        """

        subprocess.run(["docker", "exec", container_id, "bash", "-c", setup_script], check=True)

        exec_cmd = await asyncio.create_subprocess_exec(
            "docker", "exec", container_id, "tmate", "-F",
            stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )

        ssh_session_line = await capture_ssh_session_line(exec_cmd)

        if ssh_session_line:
            await interaction.user.send(embed=discord.Embed(
                description=f"### Successfully created Instance\nSSH Session Command: ```{ssh_session_line}```\nOS: Ubuntu 22.04",
                color=0x00ff00
            ))
            await interaction.followup.send(embed=discord.Embed(description="## VPS created successfully. Check your DMs for details.", color=0x00ff00))
        else:
            raise Exception("Failed to get SSH session.")

    except subprocess.CalledProcessError as e:
        await interaction.followup.send(embed=discord.Embed(description=f"## Error creating VPS: {e}", color=0xff0000))

bot.run(TOKEN)
